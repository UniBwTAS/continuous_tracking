#!/usr/bin/env python
PACKAGE = "continuous_tracking"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

g = gen.add_group("A Association")
g.add("max_centroid_distance", double_t, 0, "todo", 2., 0, 50)

ls = gen.add_group("B Line Search Algorithm")
ls.add("min_line_length", double_t, 0, "only extract lines with at least this length from start to end point", 1., 0,
       10.)
ls.add("min_number_of_inliers", int_t, 0,
       "only extract lines with at least this number of inlier points (excluding start and end point)", 12, 0, 200)
ls.add("max_distance_from_line", double_t, 0, "maximum distance of a point to be considered as inlier", 0.08, 0., 1.)
ls.add("max_distance_between_points", double_t, 0, "maximum distance between adjacent points in a line", 1.0, 0., 10)
ls.add("max_windows_with_no_inliers", int_t, 0, "todo", 1, 0, 20)
ls.add("max_line_length", double_t, 0,
       "stop line extraction at this length (should be not too big for efficiency reasons)", 4., 0., 100.)
ls.add("row_window_size", int_t, 0, "todo", 3, 1, 10)
ls.add("row_window_stride", int_t, 0, "todo", 1, 1, 10)
find_line_direction_enum = gen.enum([
    gen.const("Against_Sensor_Rotation", int_t, -1, ""),
    gen.const("With_Sensor_Rotation", int_t, 1, "")
], "find_line_direction_enum")
ls.add("find_line_direction", int_t, 0, "todo", 1, -1, 1, edit_method=find_line_direction_enum)
ls.add("line_end_min_columns_jump_ahead", int_t, 0, "todo", 4, 1, 100)

ht = gen.add_group("C Hide Tracks")
ht.add("hide_long_track_min_length", double_t, 0, "todo", 20., 0, 200)
ht.add("hide_large_base_track_min_edge_length", double_t, 0, "todo", 5., 0, 200)
ht.add("hide_long_and_high_track_min_length", double_t, 0, "todo", 4., 0, 200)
ht.add("hide_long_and_high_track_min_height", double_t, 0, "todo", 4., 0, 200)
ht.add("hide_flat_track_max_height", double_t, 0, "todo", 0.3, -0.1, 5)
ht.add("hide_long_and_flat_track_min_length", double_t, 0, "todo", 4, 0, 30)
ht.add("hide_long_and_flat_track_max_height", double_t, 0, "todo", 0.5, -0.1, 5)

dy = gen.add_group("D Track Init and Dynamics")
dy.add("max_survival_duration_without_update", double_t, 0, "todo", 0.15, 0, 5)
dy.add("max_history_age", double_t, 0, "todo", 2., 0, 30)
dy.add("minimum_absolute_centroid_motion_for_init", double_t, 0, "todo", 1.5, 0.01, 30.)
dy.add("minimum_relative_centroid_motion_for_init", double_t, 0, "todo", 1.5, 1., 10.)
dy.add("minimum_centroid_motion_for_update", double_t, 0, "todo", 0.3, 0.01, 30.)

bb = gen.add_group("E Bounding Box")
bounding_box_by_enum = gen.enum([
    gen.const("Track", int_t, 0, ""),
    gen.const("Cluster", int_t, 1, "")
], "bounding_box_by_enum")
bb.add("bounding_box_by", int_t, 0, "todo", 0, 0, 1, edit_method=bounding_box_by_enum)
bounding_box_enable_if_enum = gen.enum([
    gen.const("Yaw_Initialized", int_t, 0, ""),
    gen.const("Has_Line", int_t, 1, ""),
    gen.const("Had_Previous_Motion", int_t, 2, ""),
    gen.const("Always", int_t, 3, "")
], "bounding_box_enable_if_enum")
bb.add("bounding_box_enable_if", int_t, 0, "todo", 0, 0, 3, edit_method=bounding_box_enable_if_enum)
bounding_box_yaw_by_enum = gen.enum([
    gen.const("Track_Yaw", int_t, 0, ""),
    gen.const("Longest_Line", int_t, 1, ""),
    gen.const("Principal_Component", int_t, 2, ""),
    gen.const("Previous_Motion", int_t, 3, "")
], "bounding_box_yaw_by_enum")
bb.add("bounding_box_yaw_by", int_t, 0, "todo", 0, 0, 3, edit_method=bounding_box_yaw_by_enum)

exit(gen.generate(PACKAGE, "continuous_tracker", "ContinuousTracker"))
